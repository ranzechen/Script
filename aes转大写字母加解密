
	public  String encrypt(String strKey, String strIn) throws Exception {
        	SecretKeySpec skeySpec = getKey(strKey);
        	Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        	IvParameterSpec iv = new IvParameterSpec("0000000000000000".getBytes());
        	cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
        	byte[] encrypted = cipher.doFinal(strIn.getBytes());
        	return byte2hex(encrypted);
    }
	
	private  SecretKeySpec getKey(String strKey) throws Exception {
        	byte[] arrBTmp = strKey.getBytes();
        	byte[] arrB = new byte[16]; // 创建一个空的16位字节数组（默认值为0）
        	for (int i = 0; i < arrBTmp.length && i < arrB.length; i++) {
            	arrB[i] = arrBTmp[i];
        	}
        	SecretKeySpec skeySpec = new SecretKeySpec(arrB, "AES");
        	return skeySpec;
    }
	

	 public  String decrypt(String strKey, String strIn) throws Exception {
	        SecretKeySpec skeySpec = getKey(strKey);
	        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
	        IvParameterSpec iv = new IvParameterSpec("0000000000000000".getBytes());
	        cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
	        byte[] encrypted1 = hex2byte(strIn);

	        byte[] original = cipher.doFinal(encrypted1);
	        String originalString = new String(original);
	        return originalString;
	    }
	 
	 
	    public  byte[] hex2byte(String strhex) {
	        if (strhex == null) {
	            return null;
	        }
	        int l = strhex.length();
	        if (l % 2 == 1) {
	            return null;
	        }
	        byte[] b = new byte[l / 2];
	        for (int i = 0; i != l / 2; i++) {
	            b[i] = (byte) Integer.parseInt(strhex.substring(i * 2, i * 2 + 2),
	                    16);
	        }
	        return b;
	    }

	    public  String byte2hex(byte[] b) {
	        String hs = "";
	        String stmp = "";
	        for (int n = 0; n < b.length; n++) {
	            stmp = (java.lang.Integer.toHexString(b[n] & 0XFF));
	            if (stmp.length() == 1) {
	                hs = hs + "0" + stmp;
	            } else {
	                hs = hs + stmp;
	            }
	        }
	        return hs.toUpperCase();
	    }
